import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.9.0
 * Query Engine version: 369b3694b7edb869fad14827a33ad3f3f49bbc20
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  DS?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dumbs
 * const dumbs = await prisma.dumb.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dumbs
   * const dumbs = await prisma.dumb.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.dumb`: Exposes CRUD operations for the **Dumb** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dumbs
    * const dumbs = await prisma.dumb.findMany()
    * ```
    */
  get dumb(): DumbDelegate;

  /**
   * `prisma.bid`: Exposes CRUD operations for the **Bid** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bids
    * const bids = await prisma.bid.findMany()
    * ```
    */
  get bid(): BidDelegate;

  /**
   * `prisma.auction`: Exposes CRUD operations for the **Auction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auctions
    * const auctions = await prisma.auction.findMany()
    * ```
    */
  get auction(): AuctionDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const DumbDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type DumbDistinctFieldEnum = (typeof DumbDistinctFieldEnum)[keyof typeof DumbDistinctFieldEnum]


export declare const BidDistinctFieldEnum: {
  id: 'id',
  amount: 'amount',
  auctionAddress: 'auctionAddress'
};

export declare type BidDistinctFieldEnum = (typeof BidDistinctFieldEnum)[keyof typeof BidDistinctFieldEnum]


export declare const AuctionDistinctFieldEnum: {
  id: 'id',
  address: 'address',
  name: 'name',
  winLength: 'winLength',
  owner: 'owner',
  description: 'description',
  createdAt: 'createdAt',
  status: 'status',
  highBid: 'highBid',
  generation: 'generation',
  revenue: 'revenue'
};

export declare type AuctionDistinctFieldEnum = (typeof AuctionDistinctFieldEnum)[keyof typeof AuctionDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Dumb
 */

export type Dumb = {
  id: number
  name: string
}


export type AggregateDumb = {
  count: number
  avg: DumbAvgAggregateOutputType | null
  sum: DumbSumAggregateOutputType | null
  min: DumbMinAggregateOutputType | null
  max: DumbMaxAggregateOutputType | null
}

export type DumbAvgAggregateOutputType = {
  id: number
}

export type DumbSumAggregateOutputType = {
  id: number
}

export type DumbMinAggregateOutputType = {
  id: number
}

export type DumbMaxAggregateOutputType = {
  id: number
}


export type DumbAvgAggregateInputType = {
  id?: true
}

export type DumbSumAggregateInputType = {
  id?: true
}

export type DumbMinAggregateInputType = {
  id?: true
}

export type DumbMaxAggregateInputType = {
  id?: true
}

export type AggregateDumbArgs = {
  where?: DumbWhereInput
  orderBy?: Enumerable<DumbOrderByInput> | DumbOrderByInput
  cursor?: DumbWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DumbDistinctFieldEnum>
  count?: true
  avg?: DumbAvgAggregateInputType
  sum?: DumbSumAggregateInputType
  min?: DumbMinAggregateInputType
  max?: DumbMaxAggregateInputType
}

export type GetDumbAggregateType<T extends AggregateDumbArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDumbAggregateScalarType<T[P]>
}

export type GetDumbAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DumbAvgAggregateOutputType ? DumbAvgAggregateOutputType[P] : never
}
    
    

export type DumbSelect = {
  id?: boolean
  name?: boolean
}

export type DumbGetPayload<
  S extends boolean | null | undefined | DumbArgs,
  U = keyof S
> = S extends true
  ? Dumb
  : S extends undefined
  ? never
  : S extends DumbArgs | FindManyDumbArgs
  ? 'include' extends U
    ? Dumb 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Dumb ? Dumb[P]
: 
 never
    }
  : Dumb
: Dumb


export interface DumbDelegate {
  /**
   * Find zero or one Dumb that matches the filter.
   * @param {FindOneDumbArgs} args - Arguments to find a Dumb
   * @example
   * // Get one Dumb
   * const dumb = await prisma.dumb.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDumbArgs>(
    args: Subset<T, FindOneDumbArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb | null>, Prisma__DumbClient<DumbGetPayload<T> | null>>
  /**
   * Find the first Dumb that matches the filter.
   * @param {FindFirstDumbArgs} args - Arguments to find a Dumb
   * @example
   * // Get one Dumb
   * const dumb = await prisma.dumb.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDumbArgs>(
    args?: Subset<T, FindFirstDumbArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb | null>, Prisma__DumbClient<DumbGetPayload<T> | null>>
  /**
   * Find zero or more Dumbs that matches the filter.
   * @param {FindManyDumbArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Dumbs
   * const dumbs = await prisma.dumb.findMany()
   * 
   * // Get first 10 Dumbs
   * const dumbs = await prisma.dumb.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dumbWithIdOnly = await prisma.dumb.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyDumbArgs>(
    args?: Subset<T, FindManyDumbArgs>
  ): CheckSelect<T, Promise<Array<Dumb>>, Promise<Array<DumbGetPayload<T>>>>
  /**
   * Create a Dumb.
   * @param {DumbCreateArgs} args - Arguments to create a Dumb.
   * @example
   * // Create one Dumb
   * const Dumb = await prisma.dumb.create({
   *   data: {
   *     // ... data to create a Dumb
   *   }
   * })
   * 
  **/
  create<T extends DumbCreateArgs>(
    args: Subset<T, DumbCreateArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb>, Prisma__DumbClient<DumbGetPayload<T>>>
  /**
   * Delete a Dumb.
   * @param {DumbDeleteArgs} args - Arguments to delete one Dumb.
   * @example
   * // Delete one Dumb
   * const Dumb = await prisma.dumb.delete({
   *   where: {
   *     // ... filter to delete one Dumb
   *   }
   * })
   * 
  **/
  delete<T extends DumbDeleteArgs>(
    args: Subset<T, DumbDeleteArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb>, Prisma__DumbClient<DumbGetPayload<T>>>
  /**
   * Update one Dumb.
   * @param {DumbUpdateArgs} args - Arguments to update one Dumb.
   * @example
   * // Update one Dumb
   * const dumb = await prisma.dumb.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DumbUpdateArgs>(
    args: Subset<T, DumbUpdateArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb>, Prisma__DumbClient<DumbGetPayload<T>>>
  /**
   * Delete zero or more Dumbs.
   * @param {DumbDeleteManyArgs} args - Arguments to filter Dumbs to delete.
   * @example
   * // Delete a few Dumbs
   * const { count } = await prisma.dumb.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DumbDeleteManyArgs>(
    args: Subset<T, DumbDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Dumbs.
   * @param {DumbUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Dumbs
   * const dumb = await prisma.dumb.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DumbUpdateManyArgs>(
    args: Subset<T, DumbUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Dumb.
   * @param {DumbUpsertArgs} args - Arguments to update or create a Dumb.
   * @example
   * // Update or create a Dumb
   * const dumb = await prisma.dumb.upsert({
   *   create: {
   *     // ... data to create a Dumb
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dumb we want to update
   *   }
   * })
  **/
  upsert<T extends DumbUpsertArgs>(
    args: Subset<T, DumbUpsertArgs>
  ): CheckSelect<T, Prisma__DumbClient<Dumb>, Prisma__DumbClient<DumbGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDumbArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDumbArgs>(args: Subset<T, AggregateDumbArgs>): Promise<GetDumbAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Dumb.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DumbClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Dumb findOne
 */
export type FindOneDumbArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * Filter, which Dumb to fetch.
  **/
  where: DumbWhereUniqueInput
}


/**
 * Dumb findFirst
 */
export type FindFirstDumbArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * Filter, which Dumb to fetch.
  **/
  where?: DumbWhereInput
  orderBy?: Enumerable<DumbOrderByInput> | DumbOrderByInput
  cursor?: DumbWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DumbDistinctFieldEnum>
}


/**
 * Dumb findMany
 */
export type FindManyDumbArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * Filter, which Dumbs to fetch.
  **/
  where?: DumbWhereInput
  /**
   * Determine the order of the Dumbs to fetch.
  **/
  orderBy?: Enumerable<DumbOrderByInput> | DumbOrderByInput
  /**
   * Sets the position for listing Dumbs.
  **/
  cursor?: DumbWhereUniqueInput
  /**
   * The number of Dumbs to fetch. If negative number, it will take Dumbs before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Dumbs.
  **/
  skip?: number
  distinct?: Enumerable<DumbDistinctFieldEnum>
}


/**
 * Dumb create
 */
export type DumbCreateArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * The data needed to create a Dumb.
  **/
  data: DumbCreateInput
}


/**
 * Dumb update
 */
export type DumbUpdateArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * The data needed to update a Dumb.
  **/
  data: DumbUpdateInput
  /**
   * Choose, which Dumb to update.
  **/
  where: DumbWhereUniqueInput
}


/**
 * Dumb updateMany
 */
export type DumbUpdateManyArgs = {
  data: DumbUpdateManyMutationInput
  where?: DumbWhereInput
}


/**
 * Dumb upsert
 */
export type DumbUpsertArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * The filter to search for the Dumb to update in case it exists.
  **/
  where: DumbWhereUniqueInput
  /**
   * In case the Dumb found by the `where` argument doesn't exist, create a new Dumb with this data.
  **/
  create: DumbCreateInput
  /**
   * In case the Dumb was found with the provided `where` argument, update it with this data.
  **/
  update: DumbUpdateInput
}


/**
 * Dumb delete
 */
export type DumbDeleteArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
  /**
   * Filter which Dumb to delete.
  **/
  where: DumbWhereUniqueInput
}


/**
 * Dumb deleteMany
 */
export type DumbDeleteManyArgs = {
  where?: DumbWhereInput
}


/**
 * Dumb without action
 */
export type DumbArgs = {
  /**
   * Select specific fields to fetch from the Dumb
  **/
  select?: DumbSelect | null
}



/**
 * Model Bid
 */

export type Bid = {
  id: number
  amount: number
  auctionAddress: string
}


export type AggregateBid = {
  count: number
  avg: BidAvgAggregateOutputType | null
  sum: BidSumAggregateOutputType | null
  min: BidMinAggregateOutputType | null
  max: BidMaxAggregateOutputType | null
}

export type BidAvgAggregateOutputType = {
  id: number
  amount: number
}

export type BidSumAggregateOutputType = {
  id: number
  amount: number
}

export type BidMinAggregateOutputType = {
  id: number
  amount: number
}

export type BidMaxAggregateOutputType = {
  id: number
  amount: number
}


export type BidAvgAggregateInputType = {
  id?: true
  amount?: true
}

export type BidSumAggregateInputType = {
  id?: true
  amount?: true
}

export type BidMinAggregateInputType = {
  id?: true
  amount?: true
}

export type BidMaxAggregateInputType = {
  id?: true
  amount?: true
}

export type AggregateBidArgs = {
  where?: BidWhereInput
  orderBy?: Enumerable<BidOrderByInput> | BidOrderByInput
  cursor?: BidWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<BidDistinctFieldEnum>
  count?: true
  avg?: BidAvgAggregateInputType
  sum?: BidSumAggregateInputType
  min?: BidMinAggregateInputType
  max?: BidMaxAggregateInputType
}

export type GetBidAggregateType<T extends AggregateBidArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetBidAggregateScalarType<T[P]>
}

export type GetBidAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof BidAvgAggregateOutputType ? BidAvgAggregateOutputType[P] : never
}
    
    

export type BidSelect = {
  id?: boolean
  amount?: boolean
  auction?: boolean | AuctionArgs
  auctionAddress?: boolean
}

export type BidInclude = {
  auction?: boolean | AuctionArgs
}

export type BidGetPayload<
  S extends boolean | null | undefined | BidArgs,
  U = keyof S
> = S extends true
  ? Bid
  : S extends undefined
  ? never
  : S extends BidArgs | FindManyBidArgs
  ? 'include' extends U
    ? Bid  & {
      [P in TrueKeys<S['include']>]:
      P extends 'auction'
      ? AuctionGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Bid ? Bid[P]
: 
      P extends 'auction'
      ? AuctionGetPayload<S['select'][P]> : never
    }
  : Bid
: Bid


export interface BidDelegate {
  /**
   * Find zero or one Bid that matches the filter.
   * @param {FindOneBidArgs} args - Arguments to find a Bid
   * @example
   * // Get one Bid
   * const bid = await prisma.bid.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneBidArgs>(
    args: Subset<T, FindOneBidArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid | null>, Prisma__BidClient<BidGetPayload<T> | null>>
  /**
   * Find the first Bid that matches the filter.
   * @param {FindFirstBidArgs} args - Arguments to find a Bid
   * @example
   * // Get one Bid
   * const bid = await prisma.bid.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstBidArgs>(
    args?: Subset<T, FindFirstBidArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid | null>, Prisma__BidClient<BidGetPayload<T> | null>>
  /**
   * Find zero or more Bids that matches the filter.
   * @param {FindManyBidArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bids
   * const bids = await prisma.bid.findMany()
   * 
   * // Get first 10 Bids
   * const bids = await prisma.bid.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bidWithIdOnly = await prisma.bid.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyBidArgs>(
    args?: Subset<T, FindManyBidArgs>
  ): CheckSelect<T, Promise<Array<Bid>>, Promise<Array<BidGetPayload<T>>>>
  /**
   * Create a Bid.
   * @param {BidCreateArgs} args - Arguments to create a Bid.
   * @example
   * // Create one Bid
   * const Bid = await prisma.bid.create({
   *   data: {
   *     // ... data to create a Bid
   *   }
   * })
   * 
  **/
  create<T extends BidCreateArgs>(
    args: Subset<T, BidCreateArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid>, Prisma__BidClient<BidGetPayload<T>>>
  /**
   * Delete a Bid.
   * @param {BidDeleteArgs} args - Arguments to delete one Bid.
   * @example
   * // Delete one Bid
   * const Bid = await prisma.bid.delete({
   *   where: {
   *     // ... filter to delete one Bid
   *   }
   * })
   * 
  **/
  delete<T extends BidDeleteArgs>(
    args: Subset<T, BidDeleteArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid>, Prisma__BidClient<BidGetPayload<T>>>
  /**
   * Update one Bid.
   * @param {BidUpdateArgs} args - Arguments to update one Bid.
   * @example
   * // Update one Bid
   * const bid = await prisma.bid.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends BidUpdateArgs>(
    args: Subset<T, BidUpdateArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid>, Prisma__BidClient<BidGetPayload<T>>>
  /**
   * Delete zero or more Bids.
   * @param {BidDeleteManyArgs} args - Arguments to filter Bids to delete.
   * @example
   * // Delete a few Bids
   * const { count } = await prisma.bid.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends BidDeleteManyArgs>(
    args: Subset<T, BidDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Bids.
   * @param {BidUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bids
   * const bid = await prisma.bid.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends BidUpdateManyArgs>(
    args: Subset<T, BidUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Bid.
   * @param {BidUpsertArgs} args - Arguments to update or create a Bid.
   * @example
   * // Update or create a Bid
   * const bid = await prisma.bid.upsert({
   *   create: {
   *     // ... data to create a Bid
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bid we want to update
   *   }
   * })
  **/
  upsert<T extends BidUpsertArgs>(
    args: Subset<T, BidUpsertArgs>
  ): CheckSelect<T, Prisma__BidClient<Bid>, Prisma__BidClient<BidGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyBidArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateBidArgs>(args: Subset<T, AggregateBidArgs>): Promise<GetBidAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Bid.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__BidClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  auction<T extends AuctionArgs = {}>(args?: Subset<T, AuctionArgs>): CheckSelect<T, Prisma__AuctionClient<Auction | null>, Prisma__AuctionClient<AuctionGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Bid findOne
 */
export type FindOneBidArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * Filter, which Bid to fetch.
  **/
  where: BidWhereUniqueInput
}


/**
 * Bid findFirst
 */
export type FindFirstBidArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * Filter, which Bid to fetch.
  **/
  where?: BidWhereInput
  orderBy?: Enumerable<BidOrderByInput> | BidOrderByInput
  cursor?: BidWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<BidDistinctFieldEnum>
}


/**
 * Bid findMany
 */
export type FindManyBidArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * Filter, which Bids to fetch.
  **/
  where?: BidWhereInput
  /**
   * Determine the order of the Bids to fetch.
  **/
  orderBy?: Enumerable<BidOrderByInput> | BidOrderByInput
  /**
   * Sets the position for listing Bids.
  **/
  cursor?: BidWhereUniqueInput
  /**
   * The number of Bids to fetch. If negative number, it will take Bids before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Bids.
  **/
  skip?: number
  distinct?: Enumerable<BidDistinctFieldEnum>
}


/**
 * Bid create
 */
export type BidCreateArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * The data needed to create a Bid.
  **/
  data: BidCreateInput
}


/**
 * Bid update
 */
export type BidUpdateArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * The data needed to update a Bid.
  **/
  data: BidUpdateInput
  /**
   * Choose, which Bid to update.
  **/
  where: BidWhereUniqueInput
}


/**
 * Bid updateMany
 */
export type BidUpdateManyArgs = {
  data: BidUpdateManyMutationInput
  where?: BidWhereInput
}


/**
 * Bid upsert
 */
export type BidUpsertArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * The filter to search for the Bid to update in case it exists.
  **/
  where: BidWhereUniqueInput
  /**
   * In case the Bid found by the `where` argument doesn't exist, create a new Bid with this data.
  **/
  create: BidCreateInput
  /**
   * In case the Bid was found with the provided `where` argument, update it with this data.
  **/
  update: BidUpdateInput
}


/**
 * Bid delete
 */
export type BidDeleteArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
  /**
   * Filter which Bid to delete.
  **/
  where: BidWhereUniqueInput
}


/**
 * Bid deleteMany
 */
export type BidDeleteManyArgs = {
  where?: BidWhereInput
}


/**
 * Bid without action
 */
export type BidArgs = {
  /**
   * Select specific fields to fetch from the Bid
  **/
  select?: BidSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BidInclude | null
}



/**
 * Model Auction
 */

export type Auction = {
  id: number
  address: string
  name: string
  winLength: number
  owner: string
  description: string | null
  createdAt: Date
  status: string
  highBid: number
  generation: number
  revenue: number
}


export type AggregateAuction = {
  count: number
  avg: AuctionAvgAggregateOutputType | null
  sum: AuctionSumAggregateOutputType | null
  min: AuctionMinAggregateOutputType | null
  max: AuctionMaxAggregateOutputType | null
}

export type AuctionAvgAggregateOutputType = {
  id: number
  winLength: number
  highBid: number
  generation: number
  revenue: number
}

export type AuctionSumAggregateOutputType = {
  id: number
  winLength: number
  highBid: number
  generation: number
  revenue: number
}

export type AuctionMinAggregateOutputType = {
  id: number
  winLength: number
  highBid: number
  generation: number
  revenue: number
}

export type AuctionMaxAggregateOutputType = {
  id: number
  winLength: number
  highBid: number
  generation: number
  revenue: number
}


export type AuctionAvgAggregateInputType = {
  id?: true
  winLength?: true
  highBid?: true
  generation?: true
  revenue?: true
}

export type AuctionSumAggregateInputType = {
  id?: true
  winLength?: true
  highBid?: true
  generation?: true
  revenue?: true
}

export type AuctionMinAggregateInputType = {
  id?: true
  winLength?: true
  highBid?: true
  generation?: true
  revenue?: true
}

export type AuctionMaxAggregateInputType = {
  id?: true
  winLength?: true
  highBid?: true
  generation?: true
  revenue?: true
}

export type AggregateAuctionArgs = {
  where?: AuctionWhereInput
  orderBy?: Enumerable<AuctionOrderByInput> | AuctionOrderByInput
  cursor?: AuctionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<AuctionDistinctFieldEnum>
  count?: true
  avg?: AuctionAvgAggregateInputType
  sum?: AuctionSumAggregateInputType
  min?: AuctionMinAggregateInputType
  max?: AuctionMaxAggregateInputType
}

export type GetAuctionAggregateType<T extends AggregateAuctionArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetAuctionAggregateScalarType<T[P]>
}

export type GetAuctionAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof AuctionAvgAggregateOutputType ? AuctionAvgAggregateOutputType[P] : never
}
    
    

export type AuctionSelect = {
  id?: boolean
  address?: boolean
  name?: boolean
  winLength?: boolean
  owner?: boolean
  description?: boolean
  createdAt?: boolean
  status?: boolean
  highBid?: boolean
  generation?: boolean
  revenue?: boolean
  bids?: boolean | FindManyBidArgs
}

export type AuctionInclude = {
  bids?: boolean | FindManyBidArgs
}

export type AuctionGetPayload<
  S extends boolean | null | undefined | AuctionArgs,
  U = keyof S
> = S extends true
  ? Auction
  : S extends undefined
  ? never
  : S extends AuctionArgs | FindManyAuctionArgs
  ? 'include' extends U
    ? Auction  & {
      [P in TrueKeys<S['include']>]:
      P extends 'bids'
      ? Array<BidGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Auction ? Auction[P]
: 
      P extends 'bids'
      ? Array<BidGetPayload<S['select'][P]>> : never
    }
  : Auction
: Auction


export interface AuctionDelegate {
  /**
   * Find zero or one Auction that matches the filter.
   * @param {FindOneAuctionArgs} args - Arguments to find a Auction
   * @example
   * // Get one Auction
   * const auction = await prisma.auction.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneAuctionArgs>(
    args: Subset<T, FindOneAuctionArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction | null>, Prisma__AuctionClient<AuctionGetPayload<T> | null>>
  /**
   * Find the first Auction that matches the filter.
   * @param {FindFirstAuctionArgs} args - Arguments to find a Auction
   * @example
   * // Get one Auction
   * const auction = await prisma.auction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstAuctionArgs>(
    args?: Subset<T, FindFirstAuctionArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction | null>, Prisma__AuctionClient<AuctionGetPayload<T> | null>>
  /**
   * Find zero or more Auctions that matches the filter.
   * @param {FindManyAuctionArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Auctions
   * const auctions = await prisma.auction.findMany()
   * 
   * // Get first 10 Auctions
   * const auctions = await prisma.auction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const auctionWithIdOnly = await prisma.auction.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyAuctionArgs>(
    args?: Subset<T, FindManyAuctionArgs>
  ): CheckSelect<T, Promise<Array<Auction>>, Promise<Array<AuctionGetPayload<T>>>>
  /**
   * Create a Auction.
   * @param {AuctionCreateArgs} args - Arguments to create a Auction.
   * @example
   * // Create one Auction
   * const Auction = await prisma.auction.create({
   *   data: {
   *     // ... data to create a Auction
   *   }
   * })
   * 
  **/
  create<T extends AuctionCreateArgs>(
    args: Subset<T, AuctionCreateArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction>, Prisma__AuctionClient<AuctionGetPayload<T>>>
  /**
   * Delete a Auction.
   * @param {AuctionDeleteArgs} args - Arguments to delete one Auction.
   * @example
   * // Delete one Auction
   * const Auction = await prisma.auction.delete({
   *   where: {
   *     // ... filter to delete one Auction
   *   }
   * })
   * 
  **/
  delete<T extends AuctionDeleteArgs>(
    args: Subset<T, AuctionDeleteArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction>, Prisma__AuctionClient<AuctionGetPayload<T>>>
  /**
   * Update one Auction.
   * @param {AuctionUpdateArgs} args - Arguments to update one Auction.
   * @example
   * // Update one Auction
   * const auction = await prisma.auction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends AuctionUpdateArgs>(
    args: Subset<T, AuctionUpdateArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction>, Prisma__AuctionClient<AuctionGetPayload<T>>>
  /**
   * Delete zero or more Auctions.
   * @param {AuctionDeleteManyArgs} args - Arguments to filter Auctions to delete.
   * @example
   * // Delete a few Auctions
   * const { count } = await prisma.auction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends AuctionDeleteManyArgs>(
    args: Subset<T, AuctionDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Auctions.
   * @param {AuctionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Auctions
   * const auction = await prisma.auction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends AuctionUpdateManyArgs>(
    args: Subset<T, AuctionUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Auction.
   * @param {AuctionUpsertArgs} args - Arguments to update or create a Auction.
   * @example
   * // Update or create a Auction
   * const auction = await prisma.auction.upsert({
   *   create: {
   *     // ... data to create a Auction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Auction we want to update
   *   }
   * })
  **/
  upsert<T extends AuctionUpsertArgs>(
    args: Subset<T, AuctionUpsertArgs>
  ): CheckSelect<T, Prisma__AuctionClient<Auction>, Prisma__AuctionClient<AuctionGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyAuctionArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateAuctionArgs>(args: Subset<T, AggregateAuctionArgs>): Promise<GetAuctionAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Auction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__AuctionClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  bids<T extends FindManyBidArgs = {}>(args?: Subset<T, FindManyBidArgs>): CheckSelect<T, Promise<Array<Bid>>, Promise<Array<BidGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Auction findOne
 */
export type FindOneAuctionArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * Filter, which Auction to fetch.
  **/
  where: AuctionWhereUniqueInput
}


/**
 * Auction findFirst
 */
export type FindFirstAuctionArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * Filter, which Auction to fetch.
  **/
  where?: AuctionWhereInput
  orderBy?: Enumerable<AuctionOrderByInput> | AuctionOrderByInput
  cursor?: AuctionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<AuctionDistinctFieldEnum>
}


/**
 * Auction findMany
 */
export type FindManyAuctionArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * Filter, which Auctions to fetch.
  **/
  where?: AuctionWhereInput
  /**
   * Determine the order of the Auctions to fetch.
  **/
  orderBy?: Enumerable<AuctionOrderByInput> | AuctionOrderByInput
  /**
   * Sets the position for listing Auctions.
  **/
  cursor?: AuctionWhereUniqueInput
  /**
   * The number of Auctions to fetch. If negative number, it will take Auctions before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Auctions.
  **/
  skip?: number
  distinct?: Enumerable<AuctionDistinctFieldEnum>
}


/**
 * Auction create
 */
export type AuctionCreateArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * The data needed to create a Auction.
  **/
  data: AuctionCreateInput
}


/**
 * Auction update
 */
export type AuctionUpdateArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * The data needed to update a Auction.
  **/
  data: AuctionUpdateInput
  /**
   * Choose, which Auction to update.
  **/
  where: AuctionWhereUniqueInput
}


/**
 * Auction updateMany
 */
export type AuctionUpdateManyArgs = {
  data: AuctionUpdateManyMutationInput
  where?: AuctionWhereInput
}


/**
 * Auction upsert
 */
export type AuctionUpsertArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * The filter to search for the Auction to update in case it exists.
  **/
  where: AuctionWhereUniqueInput
  /**
   * In case the Auction found by the `where` argument doesn't exist, create a new Auction with this data.
  **/
  create: AuctionCreateInput
  /**
   * In case the Auction was found with the provided `where` argument, update it with this data.
  **/
  update: AuctionUpdateInput
}


/**
 * Auction delete
 */
export type AuctionDeleteArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
  /**
   * Filter which Auction to delete.
  **/
  where: AuctionWhereUniqueInput
}


/**
 * Auction deleteMany
 */
export type AuctionDeleteManyArgs = {
  where?: AuctionWhereInput
}


/**
 * Auction without action
 */
export type AuctionArgs = {
  /**
   * Select specific fields to fetch from the Auction
  **/
  select?: AuctionSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: AuctionInclude | null
}



/**
 * Deep Input Types
 */


export type DumbWhereInput = {
  AND?: DumbWhereInput | Enumerable<DumbWhereInput>
  OR?: DumbWhereInput | Enumerable<DumbWhereInput>
  NOT?: DumbWhereInput | Enumerable<DumbWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
}

export type DumbOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type DumbWhereUniqueInput = {
  id?: number
}

export type BidWhereInput = {
  AND?: BidWhereInput | Enumerable<BidWhereInput>
  OR?: BidWhereInput | Enumerable<BidWhereInput>
  NOT?: BidWhereInput | Enumerable<BidWhereInput>
  id?: IntFilter | number
  amount?: IntFilter | number
  auction?: AuctionRelationFilter | AuctionWhereInput
  auctionAddress?: StringFilter | string
}

export type BidOrderByInput = {
  id?: SortOrder
  amount?: SortOrder
  auctionAddress?: SortOrder
}

export type BidWhereUniqueInput = {
  id?: number
}

export type AuctionWhereInput = {
  AND?: AuctionWhereInput | Enumerable<AuctionWhereInput>
  OR?: AuctionWhereInput | Enumerable<AuctionWhereInput>
  NOT?: AuctionWhereInput | Enumerable<AuctionWhereInput>
  id?: IntFilter | number
  address?: StringFilter | string
  name?: StringFilter | string
  winLength?: IntFilter | number
  owner?: StringFilter | string
  description?: StringNullableFilter | string | null
  createdAt?: DateTimeFilter | Date | string
  status?: StringFilter | string
  highBid?: IntFilter | number
  generation?: IntFilter | number
  revenue?: IntFilter | number
  bids?: BidListRelationFilter
}

export type AuctionOrderByInput = {
  id?: SortOrder
  address?: SortOrder
  name?: SortOrder
  winLength?: SortOrder
  owner?: SortOrder
  description?: SortOrder
  createdAt?: SortOrder
  status?: SortOrder
  highBid?: SortOrder
  generation?: SortOrder
  revenue?: SortOrder
}

export type AuctionWhereUniqueInput = {
  id?: number
  address?: string
}

export type DumbCreateInput = {
  name: string
}

export type DumbUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type DumbUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type BidCreateInput = {
  amount: number
  auction: AuctionCreateOneWithoutBidsInput
}

export type BidUpdateInput = {
  amount?: number | IntFieldUpdateOperationsInput
  auction?: AuctionUpdateOneRequiredWithoutBidsInput
}

export type BidUpdateManyMutationInput = {
  amount?: number | IntFieldUpdateOperationsInput
}

export type AuctionCreateInput = {
  address: string
  name: string
  winLength: number
  owner: string
  description?: string | null
  createdAt?: Date | string
  status?: string
  highBid?: number
  generation?: number
  revenue?: number
  bids?: BidCreateManyWithoutAuctionInput
}

export type AuctionUpdateInput = {
  address?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  winLength?: number | IntFieldUpdateOperationsInput
  owner?: string | StringFieldUpdateOperationsInput
  description?: string | NullableStringFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  highBid?: number | IntFieldUpdateOperationsInput
  generation?: number | IntFieldUpdateOperationsInput
  revenue?: number | IntFieldUpdateOperationsInput
  bids?: BidUpdateManyWithoutAuctionInput
}

export type AuctionUpdateManyMutationInput = {
  address?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  winLength?: number | IntFieldUpdateOperationsInput
  owner?: string | StringFieldUpdateOperationsInput
  description?: string | NullableStringFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  highBid?: number | IntFieldUpdateOperationsInput
  generation?: number | IntFieldUpdateOperationsInput
  revenue?: number | IntFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type AuctionRelationFilter = {
  is?: AuctionWhereInput
  isNot?: AuctionWhereInput
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type BidListRelationFilter = {
  every?: BidWhereInput
  some?: BidWhereInput
  none?: BidWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type AuctionCreateOneWithoutBidsInput = {
  create?: AuctionCreateWithoutBidsInput
  connect?: AuctionWhereUniqueInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type AuctionUpdateOneRequiredWithoutBidsInput = {
  create?: AuctionCreateWithoutBidsInput
  connect?: AuctionWhereUniqueInput
  update?: AuctionUpdateWithoutBidsDataInput
  upsert?: AuctionUpsertWithoutBidsInput
}

export type BidCreateManyWithoutAuctionInput = {
  create?: BidCreateWithoutAuctionInput | Enumerable<BidCreateWithoutAuctionInput>
  connect?: BidWhereUniqueInput | Enumerable<BidWhereUniqueInput>
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type BidUpdateManyWithoutAuctionInput = {
  create?: BidCreateWithoutAuctionInput | Enumerable<BidCreateWithoutAuctionInput>
  connect?: BidWhereUniqueInput | Enumerable<BidWhereUniqueInput>
  set?: BidWhereUniqueInput | Enumerable<BidWhereUniqueInput>
  disconnect?: BidWhereUniqueInput | Enumerable<BidWhereUniqueInput>
  delete?: BidWhereUniqueInput | Enumerable<BidWhereUniqueInput>
  update?: BidUpdateWithWhereUniqueWithoutAuctionInput | Enumerable<BidUpdateWithWhereUniqueWithoutAuctionInput>
  updateMany?: BidUpdateManyWithWhereNestedInput | Enumerable<BidUpdateManyWithWhereNestedInput>
  deleteMany?: BidScalarWhereInput | Enumerable<BidScalarWhereInput>
  upsert?: BidUpsertWithWhereUniqueWithoutAuctionInput | Enumerable<BidUpsertWithWhereUniqueWithoutAuctionInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type AuctionCreateWithoutBidsInput = {
  address: string
  name: string
  winLength: number
  owner: string
  description?: string | null
  createdAt?: Date | string
  status?: string
  highBid?: number
  generation?: number
  revenue?: number
}

export type AuctionUpdateWithoutBidsDataInput = {
  address?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  winLength?: number | IntFieldUpdateOperationsInput
  owner?: string | StringFieldUpdateOperationsInput
  description?: string | NullableStringFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  status?: string | StringFieldUpdateOperationsInput
  highBid?: number | IntFieldUpdateOperationsInput
  generation?: number | IntFieldUpdateOperationsInput
  revenue?: number | IntFieldUpdateOperationsInput
}

export type AuctionUpsertWithoutBidsInput = {
  update: AuctionUpdateWithoutBidsDataInput
  create: AuctionCreateWithoutBidsInput
}

export type BidCreateWithoutAuctionInput = {
  amount: number
}

export type BidUpdateWithWhereUniqueWithoutAuctionInput = {
  where: BidWhereUniqueInput
  data: BidUpdateWithoutAuctionDataInput
}

export type BidUpdateManyWithWhereNestedInput = {
  where: BidScalarWhereInput
  data: BidUpdateManyDataInput
}

export type BidScalarWhereInput = {
  AND?: BidScalarWhereInput | Enumerable<BidScalarWhereInput>
  OR?: BidScalarWhereInput | Enumerable<BidScalarWhereInput>
  NOT?: BidScalarWhereInput | Enumerable<BidScalarWhereInput>
  id?: IntFilter | number
  amount?: IntFilter | number
  auctionAddress?: StringFilter | string
}

export type BidUpsertWithWhereUniqueWithoutAuctionInput = {
  where: BidWhereUniqueInput
  update: BidUpdateWithoutAuctionDataInput
  create: BidCreateWithoutAuctionInput
}

export type BidUpdateWithoutAuctionDataInput = {
  amount?: number | IntFieldUpdateOperationsInput
}

export type BidUpdateManyDataInput = {
  amount?: number | IntFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
