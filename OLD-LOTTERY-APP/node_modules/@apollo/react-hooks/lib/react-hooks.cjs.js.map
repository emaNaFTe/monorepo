{"version":3,"sources":["../src/data/OperationData.ts","../src/data/QueryData.ts","../src/utils/useDeepMemo.ts","../src/utils/useBaseQuery.ts","../src/useQuery.ts","../src/useLazyQuery.ts","../src/data/MutationData.ts","../src/useMutation.ts","../src/data/SubscriptionData.ts","../src/useSubscription.ts","../src/useApolloClient.ts","../src/ssr/RenderPromises.ts"],"names":["isEqual"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAA,aAAA,GAAA,YAAA;AAUE,WAAA,aAAA,CAAY,OAAZ,EAA+C,OAA/C,EAA2E;AATpE,SAAA,SAAA,GAAqB,KAArB;AACA,SAAA,eAAA,GAA2C,EAA3C;AAGA,SAAA,OAAA,GAA8B,EAA9B;AAGC,SAAA,OAAA,GAAmC,EAAnC;AAGN,SAAK,OAAL,GAAe,OAAO,IAAK,EAA3B;AACA,SAAK,OAAL,GAAe,OAAO,IAAI,EAA1B;AACD;;AAEM,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFM;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UACE,UADF,EAEE,aAFF,EAEgC;AAA9B,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,KAAA;AAA8B;;AAE9B,QAAI,aAAa,IAAI,CAACA,qBAAQ,KAAK,OAAbA,EAAsB,UAAtBA,CAAtB,EAAyD;AACvD,WAAK,eAAL,GAAuB,KAAK,OAA5B;AACD;;AACD,SAAK,OAAL,GAAe,UAAf;AACD,GARM;;AAcG,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;AACE,SAAK,SAAL,GAAiB,KAAjB;AACD,GAFS;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,YAAA;AACE,QAAM,MAAM,GACT,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAA9B,IACC,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAFhC;AAIA,IAAA,OAAA,CAAA,GAAA,CACI,QADJ,KAEE,YAFF,GAEE,4BAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAFF,GAEE,4BAAA,CAAA,CAAA,MAAA,EAAA,uEACE,6DADF,GAEE,uCAFF,CAFF;AAOA,QAAI,KAAK,GAAG,KAAZ;;AACA,QAAI,MAAM,KAAK,KAAK,MAApB,EAA4B;AAC1B,MAAA,KAAK,GAAG,IAAR;AACA,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,OAAL;AACD;;AACD,WAAO;AACL,MAAA,MAAM,EAAE,KAAK,MADR;AAEL,MAAA,KAAK,EAAA;AAFA,KAAP;AAID,GAtBS;;AAwBA,EAAA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,QAA7B,EAAqD,IAArD,EAAuE;AACrE,QAAM,SAAS,GAAG,yBAAO,QAAP,CAAlB;AACA,QAAM,qBAAqB,GAAG,gCAAc,IAAd,CAA9B;AACA,QAAM,iBAAiB,GAAG,gCAAc,SAAS,CAAC,IAAxB,CAA1B;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KACY,YADZ,GACY,4BACG,SAAA,CAAA,IAAA,KAAA,IADH,EACG,CADH,CADZ,GAEe,4BAAA,SAAA,CAAA,IAAA,KAAA,IAAA,EAAA,eAAA,qBAAA,GAAA,sBAAA,IACR,qBAAqB,GAAA,UAArB,GAAgC,iBAAhC,GAAiD,oBADzC,CAAA,CAFf;AAKD,GATS;;AAUZ,SAAA,aAAA;AAAC,CAvED,EAAA;;ACaA,IAAA,SAAA,GAAA,UAAA,MAAA,EAAA;AAAkD,wBAAA,SAAA,EAAA,MAAA;;AAQhD,WAAA,SAAA,CAAY,EAAZ,EAQC;QAPC,OAAA,GAAA,EAAA,CAAA,O;QACA,OAAA,GAAA,EAAA,CAAA,O;QACA,SAAA,GAAA,EAAA,CAAA,S;;AAHF,QAAA,KAAA,GASE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IATzB;;AALQ,IAAA,KAAA,CAAA,YAAA,GAAqD,EAArD;AACA,IAAA,KAAA,CAAA,iBAAA,GAA+D,EAA/D;AACA,IAAA,KAAA,CAAA,OAAA,GAAmB,KAAnB;;AAoGA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,OAAD,EAAuC;AAC5D,MAAA,KAAI,CAAC,OAAL;;AACA,MAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AACA,MAAA,KAAI,CAAC,WAAL,GAAmB,OAAnB;;AACA,MAAA,KAAI,CAAC,SAAL;AACD,KALO;;AAOA,IAAA,KAAA,CAAA,gBAAA,GAAmB,YAAA;AACzB,UAAM,MAAM,GAAG,KAAI,CAAC,cAAL,EAAf;;AACA,MAAA,KAAI,CAAC,sBAAL;;AACA,aAAO,MAAP;AACD,KAJO;;AAiTA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAC,SAAD,EAAuB;AAC1C,aAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,OAA9B,CAAsC,SAAtC,CAAA;AAAgD,KAD1C;;AAGA,IAAA,KAAA,CAAA,YAAA,GAAe,UACrB,gBADqB,EAEgB;AAClC,aAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,SAA9B,CAAwC,gBAAxC,CAAA;AAAyD,KAHtD;;AAKA,IAAA,KAAA,CAAA,cAAA,GAAiB,UACvB,KADuB,EAIb;AACP,aAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,WAA9B,CAA0C,KAA1C,CAAA;AAAgD,KAL7C;;AAOA,IAAA,KAAA,CAAA,eAAA,GAAkB,UAAC,YAAD,EAAqB;AAC7C,MAAA,KAAI,CAAC,iBAAL,IACE,KAAI,CAAC,iBAAL,CAAuB,KADzB,IAEE,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,YAA9B,CAA2C,YAA3C,CAFF;AAGD,KAJO;;AAMA,IAAA,KAAA,CAAA,cAAA,GAAiB,YAAA;AACvB,MAAA,KAAI,CAAC,iBAAL,IACE,KAAI,CAAC,iBAAL,CAAuB,KADzB,IAEE,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,WAA9B,EAFF;AAGD,KAJO;;AAMA,IAAA,KAAA,CAAA,kBAAA,GAAqB,UAI3B,OAJ2B,EAQ1B;AACE,aAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,eAA9B,CAA8C,OAA9C,CAAA;AAAsD,KATnD;;AA1aN,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;;AACD;;AAEM,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,SAAK,aAAL;;AAEM,QAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,QAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,QAAQ,KAAA,GAAA,EAAA,CAAA,KAAR;;AACN,QAAI,IAAI,IAAI,KAAK,KAAK,KAAK,YAAL,CAAkB,KAAxC,EAA+C;AAC7C,WAAK,uBAAL;AACA,WAAK,YAAL,CAAkB,KAAlB,GAA0B,KAA1B;AACD;;AAED,SAAK,qBAAL;AAEA,QAAI,KAAK,SAAT,EAAoB,KAAK,sBAAL;AAEpB,WAAO,KAAK,mBAAL,MAA8B,KAAK,gBAAL,EAArC;AACD,GAdM;;AAgBA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,WAAO,CAAC,KAAK,OAAN,GACH,CACE,KAAK,YADP,EAEE;AACE,MAAA,OAAO,EAAE,KADX;AAEE,MAAA,aAAa,EAAE,4BAAc,KAF/B;AAGE,MAAA,MAAM,EAAE,KAHV;AAIE,MAAA,IAAI,EAAE;AAJR,KAFF,CADG,GAUH,CAAC,KAAK,YAAN,EAAoB,KAAK,OAAL,EAApB,CAVJ;AAWD,GAZM;;AAeA,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;AACA,QAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,GAAR,KAAgB,KAApC,EAA2C,OAAO,KAAP;AAG3C,QAAM,GAAG,GAAG,KAAK,iBAAL,CAAuB,KAAnC;AACA,QAAM,aAAa,GAAG,GAAG,CAAC,gBAAJ,EAAtB;AACA,WAAO,aAAa,CAAC,OAAd,GAAwB,GAAG,CAAC,MAAJ,EAAxB,GAAuC,KAA9C;AACD,GARM;;AAUA,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,EAApB,EAA6D;QAAvC,EAAA,GAAA,CAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,I;QAAA,IAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,E;AACpB,SAAK,SAAL,GAAiB,IAAjB;;AAEA,QAAI,CAAC,IAAD,IAAS,KAAK,OAAlB,EAA2B;AACzB,WAAK,sBAAL;AACD;;AAED,SAAK,eAAL,GAAuB,KAAK,UAAL,EAAvB;AACA,WAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAP;AACD,GATM;;AAWA,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,SAAK,uBAAL;AACA,WAAO,KAAK,iBAAL,CAAuB,KAA9B;AACA,WAAO,KAAK,YAAL,CAAkB,MAAzB;AACD,GAJM;;AAMA,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,CAAhB;;AAEA,QAAI,KAAK,WAAT,EAAsB;AACpB,MAAA,OAAO,CAAC,SAAR,GAAiB,qBAAA,qBAAA,EAAA,EACZ,OAAO,CAAC,SADI,CAAA,EAEZ,KAAK,WAAL,CAAiB,SAFL,CAAjB;AAIA,MAAA,OAAO,CAAC,OAAR,GAAe,qBAAA,qBAAA,EAAA,EACV,OAAO,CAAC,OADE,CAAA,EAEV,KAAK,WAAL,CAAiB,OAFP,CAAf;AAID;;AAGD,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,OAAO,CAAC,IAAf;AACD;;AAED,WAAO,OAAP;AACD,GApBM;;AAsBA,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAO,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,cAApC;AACD,GAFM;;AAiBC,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;AACE,QAAM,WAAW,GAAG,KAAK,UAAL,GAAkB,GAAlB,KAA0B,KAA9C;AACA,QAAM,aAAa,GAAG,KAAK,aAAL,GAAqB,MAArB,CAA4B,qBAAlD;AAEA,QAAM,UAAU,GAAG,qBAAA;AACjB,MAAA,OAAO,EAAE,IADQ;AAEjB,MAAA,aAAa,EAAE,4BAAc,OAFZ;AAGjB,MAAA,MAAM,EAAE,IAHS;AAIjB,MAAA,IAAI,EAAE,SAJW;AAKjB,MAAA,KAAK,EAAE,KALU;AAMjB,MAAA,MAAM,EAAE,KAAK;AANI,KAAA,EAOd,KAAK,qBAAL,EAPc,CAAnB;;AAYA,QAAI,WAAW,KAAK,KAAK,YAAL,MAAuB,aAA5B,CAAf,EAA2D;AACzD,WAAK,YAAL,CAAkB,MAAlB,GAA2B,UAA3B;AACA,aAAO,UAAP;AACD;;AAED,QAAI,MAAJ;;AACA,QAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB,MAAA,MAAM,GACJ,KAAK,OAAL,CAAa,cAAb,CAA6B,eAA7B,CACE,IADF,EAEE,KAAK,gBAFP,KAGK,UAJP;AAKD;;AAED,WAAO,MAAP;AACD,GA/BO;;AAiCA,EAAA,SAAA,CAAA,SAAA,CAAA,6BAAA,GAAR,YAAA;AACE,QAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;AACA,SAAK,kBAAL,CAAwB,OAAO,CAAC,KAAhC,EAAuC,0BAAa,KAApD;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,WAAR,IAAuB,OAA3C;;AAIA,QACE,KAAK,YAAL,OACC,OAAO,CAAC,WAAR,KAAwB,cAAxB,IACC,OAAO,CAAC,WAAR,KAAwB,mBAF1B,CADF,EAIE;AACA,MAAA,OAAO,CAAC,WAAR,GAAsB,aAAtB;AACD;;AAED,WAAA,qBAAA,qBAAA,EAAA,EACK,OADL,CAAA,EACY;AACV,MAAA,WAAW,EAAA,WADD;AAEV,MAAA,OAAO,EAAE,OAAO,CAAC,OAFP;AAGV,MAAA,QAAQ,EAAE;AAAE,QAAA,cAAc,EAAE;AAAE,UAAA,WAAW,EAAA;AAAb;AAAlB;AAHA,KADZ,CAAA;AAMD,GArBO;;AAuBA,EAAA,SAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,YAAA;;;AAIE,QAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB,WAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,OAAL,CAAc,cAAd,CAA8B,gBAA9B,CAC7B,KAAK,UAAL,EAD6B,CAA/B;AAGD;;AAED,QAAI,CAAC,KAAK,iBAAL,CAAuB,KAA5B,EAAmC;AACjC,UAAM,sBAAsB,GAAG,KAAK,6BAAL,EAA/B;AAEA,WAAK,YAAL,CAAkB,sBAAlB,GAAwC,qBAAA,qBAAA,EAAA,EACnC,sBADmC,CAAA,EACb;AACzB,QAAA,QAAQ,EAAE;AADe,OADa,CAAxC;AAIA,WAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,aAAL,GAAqB,MAArB,CAA4B,UAA5B,CAAsC,qBAAA,EAAA,EAChE,sBADgE,CAAtC,CAA/B;;AAIA,UAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB,SAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,cAAd,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,KAAA,CAA5B,GAA4B,EAAA,CAAE,qBAAF,CAC1B,KAAK,iBAAL,CAAuB,KADG,EAE1B,sBAF0B,CAA5B;AAID;AACF;AACF,GA5BO;;AA8BA,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AAEE,QAAI,CAAC,KAAK,iBAAL,CAAuB,KAA5B,EAAmC;AACjC,WAAK,yBAAL;AACA;AACD;;AAED,QAAM,yBAAyB,GAAA,qBAAA,qBAAA,EAAA,EAC1B,KAAK,6BAAL,EAD0B,CAAA,EACU;AACvC,MAAA,QAAQ,EAAE;AAD6B,KADV,CAA/B;;AAKA,QACE,CAACA,qBACC,yBADDA,EAEC,KAAK,YAAL,CAAkB,sBAFnBA,CADH,EAKE;AACA,WAAK,YAAL,CAAkB,sBAAlB,GAA2C,yBAA3C;AACA,WAAK,iBAAL,CACG,KADH,CACU,UADV,CACqB,yBADrB,EAMG,KANH,CAMS,YAAA,CAAQ,CANjB;AAOD;AACF,GA3BO;;AA6BA,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,iBAAL,CAAuB,YAAvB,IAAuC,KAAK,UAAL,GAAkB,IAA7D,EAAmE;AAEnE,QAAM,QAAQ,GAAG,KAAK,iBAAL,CAAuB,KAAxC;AACA,SAAK,iBAAL,CAAuB,YAAvB,GAAsC,QAAQ,CAAC,SAAT,CAAmB;AACvD,MAAA,IAAI,EAAE,UAAC,EAAD,EAAiC;YAA9B,OAAA,GAAA,EAAA,CAAA,O;YAAS,aAAA,GAAA,EAAA,CAAA,a;YAAe,IAAA,GAAA,EAAA,CAAA,I;AAC/B,YAAM,cAAc,GAAG,KAAI,CAAC,YAAL,CAAkB,MAAzC;;AAGA,YACE,cAAc,IACd,cAAc,CAAC,OAAf,KAA2B,OAD3B,IAEA,cAAc,CAAC,aAAf,KAAiC,aAFjC,IAGAA,qBAAQ,cAAc,CAAC,IAAvBA,EAA6B,IAA7BA,CAJF,EAKE;AACA;AACD;;AAED,QAAA,KAAI,CAAC,SAAL;AACD,OAfsD;AAgBvD,MAAA,KAAK,EAAE,UAAC,KAAD,EAAM;AACX,QAAA,KAAI,CAAC,kBAAL;;AACA,YAAI,CAAC,KAAK,CAAC,cAAN,CAAqB,eAArB,CAAL,EAA4C,MAAM,KAAN;AAE5C,YAAM,cAAc,GAAG,KAAI,CAAC,YAAL,CAAkB,MAAzC;;AACA,YACG,cAAc,IAAI,cAAc,CAAC,OAAlC,IACA,CAACA,qBAAQ,KAARA,EAAe,KAAI,CAAC,YAAL,CAAkB,KAAjCA,CAFH,EAGE;AACA,UAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,GAA0B,KAA1B;;AACA,UAAA,KAAI,CAAC,SAAL;AACD;AACF;AA5BsD,KAAnB,CAAtC;AA8BD,GAlCO;;AAoCA,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,YAAA;AACE,SAAK,uBAAL;AASA,QAAM,SAAS,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,YAA9B,EAAlB;AACA,QAAM,UAAU,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,aAA9B,EAAnB;AACA,SAAK,iBAAL,CAAuB,KAAvB,CAA8B,gBAA9B;AACA,SAAK,sBAAL;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,KAAK,iBAAL,CAAuB,KAArC,EAA6C;AAC3C,MAAA,SAAS,EAAA,SADkC;AAE3C,MAAA,UAAU,EAAA;AAFiC,KAA7C;AAID,GAlBO;;AAoBA,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AACE,QAAI,MAAM,GAAQ,KAAK,qBAAL,EAAlB;AACA,QAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;;AAKA,QAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,MAAA,MAAM,GAAA,qBAAA,qBAAA,EAAA,EACD,MADC,CAAA,EACK;AACT,QAAA,IAAI,EAAE,SADG;AAET,QAAA,KAAK,EAAE,SAFE;AAGT,QAAA,OAAO,EAAE,KAHA;AAIT,QAAA,MAAM,EAAE;AAJC,OADL,CAAN;AAOD,KARD,MAQO;AAEL,UAAM,aAAa,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,gBAA9B,EAAtB;AACQ,UAAA,OAAA,GAAA,aAAA,CAAA,OAAA;AAAA,UAAS,OAAA,GAAA,aAAA,CAAA,OAAT;AAAA,UAAkB,aAAA,GAAA,aAAA,CAAA,aAAlB;AAAA,UAAiC,MAAA,GAAA,aAAA,CAAA,MAAjC;AACF,UAAA,KAAA,GAAA,aAAA,CAAA,KAAA;AAAA,UAAO,IAAA,GAAA,aAAA,CAAA,IAAP;;AAIN,UAAI,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,QAAA,KAAK,GAAG,IAAI,yBAAJ,CAAgB;AAAE,UAAA,aAAa,EAAE;AAAjB,SAAhB,CAAR;AACD;;AAED,MAAA,MAAM,GAAA,qBAAA,qBAAA,EAAA,EACD,MADC,CAAA,EACK;AACT,QAAA,OAAO,EAAA,OADE;AAET,QAAA,aAAa,EAAA,aAFJ;AAGT,QAAA,KAAK,EAAA,KAHI;AAIT,QAAA,MAAM,EAAE;AAJC,OADL,CAAN;;AAQA,UAAI,OAAJ,EAAa;AACX,YAAM,YAAY,GAChB,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,IADvD;AAEA,QAAA,MAAM,CAAC,IAAP,GACE,YAAY,IAAI,IAAhB,G,8CAES,Y,GACA,I,CAHT,GAKI,YAAY,IAAI,IANtB;AAOD,OAVD,MAUO,IAAI,KAAJ,EAAW;AAChB,QAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AACpB,UAAA,IAAI,EAAE,CAAC,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,aAA9B,MAAkD,EAAnD,EACH;AAFiB,SAAtB;AAID,OALM,MAKA;AACG,YAAA,WAAA,GAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,OAAA,CAAA,WAAA;AACA,YAAA,cAAA,GAAA,OAAA,CAAA,cAAA;;AACR,YACE,cAAc,IACd,CAAC,IADD,IAEA,OAFA,IAGA,WAAW,KAAK,YAJlB,EAKE;AASA,UAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AACpB,YAAA,OAAO,EAAE,IADW;AAEpB,YAAA,aAAa,EAAE,4BAAc;AAFT,WAAtB;AAIA,UAAA,MAAM,CAAC,OAAP;AACA,iBAAO,MAAP;AACD;;AAED,QAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AACD;AACF;;AAED,IAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,MAArB;AACA,SAAK,YAAL,CAAkB,OAAlB,GACG,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,OAAtD,IAAkE,KADpE;AAEA,SAAK,YAAL,CAAkB,MAAlB,GAA2B,MAA3B;AAMA,SAAK,iBAAL,CAAuB,KAAvB,IACE,KAAK,iBAAL,CAAuB,KAAvB,CAA6B,qBAA7B,EADF;AAGA,WAAO,MAAP;AACD,GA5FO;;AA8FA,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AACE,QAAM,QAAQ,GAAG,KAAK,iBAAL,CAAuB,KAAxC;AACA,QAAI,CAAC,QAAD,IAAa,CAAC,KAAK,YAAL,CAAkB,MAApC,EAA4C;AAEtC,QAAA,EAAA,GAAA,KAAA,YAAA,CAAA,MAAA;AAAA,QAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,QAAQ,OAAA,GAAA,EAAA,CAAA,OAAR;AAAA,QAAiB,KAAA,GAAA,EAAA,CAAA,KAAjB;;AAEN,QAAI,CAAC,OAAL,EAAc;AACN,UAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,UAAE,KAAA,GAAA,EAAA,CAAA,KAAF;AAAA,UAAS,SAAA,GAAA,EAAA,CAAA,SAAT;AAAA,UAAoB,WAAA,GAAA,EAAA,CAAA,WAApB;AAAA,UAAiC,OAAA,GAAA,EAAA,CAAA,OAAjC;;AAGN,UACE,KAAK,eAAL,IACA,CAAC,KAAK,YAAL,CAAkB,OADnB,IAEAA,qBAAQ,KAAK,eAAL,CAAqB,KAA7BA,EAAoC,KAApCA,CAFA,IAGAA,qBAAQ,KAAK,eAAL,CAAqB,SAA7BA,EAAwC,SAAxCA,CAJF,EAKE;AACA;AACD;;AAED,UAAI,WAAW,IAAI,CAAC,KAApB,EAA2B;AACzB,QAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFD,MAEO,IAAI,OAAO,IAAI,KAAf,EAAsB;AAC3B,QAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF;AACF,GAzBO;;AA2BA,EAAA,SAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,YAAA;AACE,QAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACvC,WAAK,iBAAL,CAAuB,YAAvB,CAAoC,WAApC;AACA,aAAO,KAAK,iBAAL,CAAuB,YAA9B;AACD;AACF,GALO;;AA6CA,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACE,QAAM,UAAU,GAAG,KAAK,iBAAL,CAAuB,KAA1C;AACA,WAAO;AACL,MAAA,SAAS,EAAE,UAAU,CAAC,SADjB;AAEL,MAAA,OAAO,EAAE,KAAK,UAFT;AAGL,MAAA,SAAS,EAAE,KAAK,YAHX;AAIL,MAAA,WAAW,EAAE,KAAK,cAJb;AAKL,MAAA,YAAY,EAAE,KAAK,eALd;AAML,MAAA,WAAW,EAAE,KAAK,cANb;AAOL,MAAA,eAAe,EAAE,KAAK;AAPjB,KAAP;AASD,GAXO;;AAYV,SAAA,SAAA;AAndA,CAAA,CAAkD,aAAlD,CAAA;;SChBgB,W,CACd,M,EACA,G,EAAS;AAET,MAAM,GAAG,GAAG,oBAAZ;;AAEA,MAAI,CAAC,GAAG,CAAC,OAAL,IAAgB,CAACA,qBAAQ,GAARA,EAAa,GAAG,CAAC,OAAJ,CAAY,GAAzBA,CAArB,EAAoD;AAClD,IAAA,GAAG,CAAC,OAAJ,GAAc;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,KAAK,EAAE,MAAM;AAApB,KAAd;AACD;;AAED,SAAO,GAAG,CAAC,OAAJ,CAAY,KAAnB;AACD;;SCTe,Y,CACd,K,EACA,O,EACA,I,EAAY;AAAZ,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,KAAA;AAAY;;AAEZ,MAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;;AACM,MAAA,EAAA,GAAA,uBAAA,UAAA,CAAA,EAAA;AAAA,WAAA,CAAA,GAAA,CAAA;AAAA,GAAA,EAAA,CAAA,CAAA;AAAA,MAAC,IAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAO,WAAA,GAAA,EAAA,CAAA,CAAA,CAAP;;AACN,MAAM,cAAc,GAAG,OAAO,GAAA,qBAAA,qBAAA,EAAA,EAAQ,OAAR,CAAA,EAAe;AAAE,IAAA,KAAK,EAAA;AAAP,GAAf,CAAA,GAA2B;AAAE,IAAA,KAAK,EAAA;AAAP,GAAzD;AAEA,MAAM,YAAY,GAAG,oBAArB;AACA,MAAM,SAAS,GACb,YAAY,CAAC,OAAb,IACA,IAAI,SAAJ,CAAiC;AAC/B,IAAA,OAAO,EAAE,cADsB;AAE/B,IAAA,OAAO,EAAA,OAFwB;AAG/B,IAAA,SAAS,EAAA,YAAA;AACP,UAAI,CAAC,SAAS,CAAC,YAAV,EAAL,EAA+B;AAK7B,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,WAAvB;AACD,OAND,MAMO;AAGL,QAAA,WAAW;AACZ;AACF;AAf8B,GAAjC,CAFF;AAoBA,EAAA,SAAS,CAAC,UAAV,CAAqB,cAArB;AACA,EAAA,SAAS,CAAC,OAAV,GAAoB,OAApB;;AAKA,MAAI,SAAS,CAAC,YAAV,MAA4B,CAAC,YAAY,CAAC,OAA9C,EAAuD;AACrD,IAAA,YAAY,CAAC,OAAb,GAAuB,SAAvB;AACD;;AAKD,MAAM,IAAI,GAAG;AACX,IAAA,OAAO,EAAA,qBAAA,qBAAA,EAAA,EAAO,cAAP,CAAA,EAAqB;AAAE,MAAA,OAAO,EAAE,SAAX;AAAsB,MAAA,WAAW,EAAE;AAAnC,KAArB,CADI;AAEX,IAAA,OAAO,EAAA,OAFI;AAGX,IAAA,IAAI,EAAA;AAHO,GAAb;AAMA,MAAM,MAAM,GAAG,WAAW,CACxB,YAAA;AAAM,WAAC,IAAI,GAAG,SAAS,CAAC,WAAV,EAAH,GAA6B,SAAS,CAAC,OAAV,EAAlC;AAAsD,GADpC,EAExB,IAFwB,CAA1B;AAKA,MAAM,WAAW,GAAG,IAAI,GACnB,MAAwC,CAAC,CAAD,CADrB,GAEnB,MAFL;AAIA,wBAAU,YAAA;AAGR,QAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;AACzB,MAAA,YAAY,CAAC,OAAb,GAAuB,SAAvB;AACD;;AAED,WAAO,YAAA;AAAM,aAAA,SAAS,CAAC,OAAV,EAAA;AAAmB,KAAhC;AACD,GARD,EAQG,EARH;AAUA,wBAAU,YAAA;AAAM,WAAA,SAAS,CAAC,YAAV,CAAuB;AAAE,MAAA,IAAI,EAAA;AAAN,KAAvB,CAAA;AAAgC,GAAhD,EAAkD,CAChD,WAAW,CAAC,OADoC,EAEhD,WAAW,CAAC,aAFoC,EAGhD,WAAW,CAAC,KAHoC,EAIhD,WAAW,CAAC,IAJoC,CAAlD;AAOA,SAAO,MAAP;AACD;;SClFe,Q,CACd,K,EACA,O,EAA6C;AAE7C,SAAO,YAAY,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,KAApC,CAAnB;AAID;;SCRe,Y,CACd,K,EACA,O,EAAiD;AAEjD,SAAO,YAAY,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,IAApC,CAAnB;AAID;;ACAD,IAAA,YAAA,GAAA,UAAA,MAAA,EAAA;AAGU,wBAAA,YAAA,EAAA,MAAA;;AAMR,WAAA,YAAA,CAAY,EAAZ,EAUC;QATC,OAAA,GAAA,EAAA,CAAA,O;QACA,OAAA,GAAA,EAAA,CAAA,O;QACA,MAAA,GAAA,EAAA,CAAA,M;QACA,SAAA,GAAA,EAAA,CAAA,S;;AAJF,QAAA,KAAA,GAWE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IAXzB;;AAkCQ,IAAA,KAAA,CAAA,WAAA,GAAc,UACpB,uBADoB,EAIgC;AAHpD,UAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,uBAAA,GAGI,EAHJ;AAGoD;;AAEpD,MAAA,KAAI,CAAC,eAAL;;AACA,UAAM,UAAU,GAAG,KAAI,CAAC,qBAAL,EAAnB;;AAEA,aAAO,KAAI,CAAC,MAAL,CAAY,uBAAZ,EACJ,IADI,CACC,UAAC,QAAD,EAAiC;AACrC,QAAA,KAAI,CAAC,mBAAL,CAAyB,QAAzB,EAAmC,UAAnC;;AACA,eAAO,QAAP;AACD,OAJI,EAKJ,KALI,CAKE,UAAC,KAAD,EAAmB;AACxB,QAAA,KAAI,CAAC,eAAL,CAAqB,KAArB,EAA4B,UAA5B;;AACA,YAAI,CAAC,KAAI,CAAC,UAAL,GAAkB,OAAvB,EAAgC,MAAM,KAAN;AACjC,OARI,CAAP;AASD,KAlBO;;AAtBN,IAAA,KAAI,CAAC,kBAAL,CAAwB,OAAO,CAAC,QAAhC,EAA0C,0BAAa,QAAvD;;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,IAAA,KAAI,CAAC,oBAAL,GAA4B,CAA5B;;AACD;;AAEM,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,MAAf,EAA4C;AAC1C,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,kBAAL,CAAwB,KAAK,UAAL,GAAkB,QAA1C,EAAoD,0BAAa,QAAjE;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,aAAL,GAAqB,MAArC;AACA,WAAO,CAAC,KAAK,WAAN,EAAmB,MAAnB,CAAP;AACD,GALM;;AAOA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,SAAK,SAAL,GAAiB,IAAjB;AACA,WAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAP;AACD,GAHM;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CAEC,CAFM;;AAwBC,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAR,UACE,uBADF,EACqE;AAE7D,QAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,QACJ,QAAA,GAAA,EAAA,CAAA,QADI;AAAA,QAEJ,SAAA,GAAA,EAAA,CAAA,SAFI;AAAA,QAGJ,kBAAA,GAAA,EAAA,CAAA,kBAHI;AAAA,QAIJ,MAAA,GAAA,EAAA,CAAA,MAJI;AAAA,QAKJ,EAAA,GAAA,EAAA,CAAA,OALI;AAAA,QAKJ,eAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EALI;AAAA,QAMJ,EAAA,GAAA,EAAA,CAAA,mBANI;AAAA,QAMJ,mBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EANI;AAAA,QAOJ,WAAA,GAAA,EAAA,CAAA,WAPI;;AASN,QAAM,aAAa,GAAA,qBAAA,EAAA,EAAQ,uBAAR,CAAnB;AAEA,QAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CACtB,EADsB,EAEtB,SAFsB,EAGtB,aAAa,CAAC,SAHQ,CAAxB;AAKA,WAAO,aAAa,CAAC,SAArB;AAEA,WAAO,KAAK,aAAL,GAAqB,MAArB,CAA4B,MAA5B,CAAkC,qBAAA;AACvC,MAAA,QAAQ,EAAA,QAD+B;AAEvC,MAAA,kBAAkB,EAAA,kBAFqB;AAGvC,MAAA,cAAc,EACZ,aAAa,CAAC,cAAd,IAAgC,KAAK,UAAL,GAAkB,cAJb;AAKvC,MAAA,mBAAmB,EAAA,mBALoB;AAMvC,MAAA,MAAM,EAAA,MANiC;AAOvC,MAAA,OAAO,EAAE,eAP8B;AAQvC,MAAA,WAAW,EAAA,WAR4B;AASvC,MAAA,SAAS,EAAE;AAT4B,KAAA,EAUpC,aAVoC,CAAlC,CAAP;AAYD,GAjCO;;AAmCA,EAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACE,QAAI,CAAC,KAAK,MAAL,CAAY,OAAb,IAAwB,CAAC,KAAK,UAAL,GAAkB,aAA/C,EAA8D;AAC5D,WAAK,YAAL,CAAkB;AAChB,QAAA,OAAO,EAAE,IADO;AAEhB,QAAA,KAAK,EAAE,SAFS;AAGhB,QAAA,IAAI,EAAE,SAHU;AAIhB,QAAA,MAAM,EAAE;AAJQ,OAAlB;AAMD;AACF,GATO;;AAWA,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UACE,QADF,EAEE,UAFF,EAEoB;AAEZ,QAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,QAAE,WAAA,GAAA,EAAA,CAAA,WAAF;AAAA,QAAe,aAAA,GAAA,EAAA,CAAA,aAAf;;AAEE,QAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,QAAM,MAAA,GAAA,QAAA,CAAA,MAAN;AACR,QAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA1B,GACI,IAAI,yBAAJ,CAAgB;AAAE,MAAA,aAAa,EAAE;AAAjB,KAAhB,CADJ,GAEI,SAHN;;AAKA,QAAM,cAAc,GAAG,YAAA;AACrB,aAAA,WAAW,GAAG,WAAW,CAAC,IAAD,CAAd,GAAgC,IAA3C;AAA+C,KADjD;;AAGA,QAAI,KAAK,oBAAL,CAA0B,UAA1B,KAAyC,CAAC,aAA9C,EAA6D;AAC3D,WAAK,YAAL,CAAkB;AAChB,QAAA,MAAM,EAAE,IADQ;AAEhB,QAAA,OAAO,EAAE,KAFO;AAGhB,QAAA,IAAI,EAAA,IAHY;AAIhB,QAAA,KAAK,EAAA;AAJW,OAAlB;AAMD;;AACD,IAAA,cAAc;AACf,GAxBO;;AA0BA,EAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,KAAxB,EAA4C,UAA5C,EAA8D;AACpD,QAAA,OAAA,GAAA,KAAA,UAAA,GAAA,OAAA;;AAER,QAAI,KAAK,oBAAL,CAA0B,UAA1B,CAAJ,EAA2C;AACzC,WAAK,YAAL,CAAkB;AAChB,QAAA,OAAO,EAAE,KADO;AAEhB,QAAA,KAAK,EAAA,KAFW;AAGhB,QAAA,IAAI,EAAE,SAHU;AAIhB,QAAA,MAAM,EAAE;AAJQ,OAAlB;AAMD;;AAED,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAfO;;AAiBA,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACE,WAAO,EAAE,KAAK,oBAAd;AACD,GAFO;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,UAA7B,EAA+C;AAC7C,WAAO,KAAK,oBAAL,KAA8B,UAArC;AACD,GAFO;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,MAArB,EAAkD;AAChD,QACE,KAAK,SAAL,KACC,CAAC,KAAK,cAAN,IAAwB,CAACA,qBAAQ,KAAK,cAAbA,EAA6B,MAA7BA,CAD1B,CADF,EAGE;AACA,WAAK,SAAL,CAAe,MAAf;AACA,WAAK,cAAL,GAAsB,MAAtB;AACD;AACF,GARO;;AASV,SAAA,YAAA;AAzKA,CAAA,CAGU,aAHV,CAAA;;SCPgB,W,CACd,Q,EACA,O,EAAgD;AAEhD,MAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;;AACM,MAAA,EAAA,GAAA,qBAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA,CAAA;AAAA,MAAC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAS,SAAA,GAAA,EAAA,CAAA,CAAA,CAAT;;AACN,MAAM,cAAc,GAAG,OAAO,GAAA,qBAAA,qBAAA,EAAA,EAAQ,OAAR,CAAA,EAAe;AAAE,IAAA,QAAQ,EAAA;AAAV,GAAf,CAAA,GAA8B;AAAE,IAAA,QAAQ,EAAA;AAAV,GAA5D;AAEA,MAAM,eAAe,GAAG,oBAAxB;;AACA,WAAS,kBAAT,GAA2B;AACzB,QAAI,CAAC,eAAe,CAAC,OAArB,EAA8B;AAC5B,MAAA,eAAe,CAAC,OAAhB,GAA0B,IAAI,YAAJ,CAAoC;AAC5D,QAAA,OAAO,EAAE,cADmD;AAE5D,QAAA,OAAO,EAAA,OAFqD;AAG5D,QAAA,MAAM,EAAA,MAHsD;AAI5D,QAAA,SAAS,EAAA;AAJmD,OAApC,CAA1B;AAMD;;AACD,WAAO,eAAe,CAAC,OAAvB;AACD;;AAED,MAAM,YAAY,GAAG,kBAAkB,EAAvC;AACA,EAAA,YAAY,CAAC,UAAb,CAAwB,cAAxB;AACA,EAAA,YAAY,CAAC,OAAb,GAAuB,OAAvB;AAEA,wBAAU,YAAA;AAAM,WAAA,YAAY,CAAC,YAAb,EAAA;AAA2B,GAA3C;AAEA,SAAO,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAP;AACD;;AC7BD,IAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;AAGU,wBAAA,gBAAA,EAAA,MAAA;;AAIR,WAAA,gBAAA,CAAY,EAAZ,EAQC;QAPC,OAAA,GAAA,EAAA,CAAA,O;QACA,OAAA,GAAA,EAAA,CAAA,O;QACA,SAAA,GAAA,EAAA,CAAA,S;;AAHF,QAAA,KAAA,GASE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IATzB;;AAFQ,IAAA,KAAA,CAAA,iBAAA,GAAmD,EAAnD;AAYN,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB;;;AACD;;AAEM,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,MAAf,EAAgD;AAC9C,QAAI,KAAK,UAAL,GAAkB,IAAlB,KAA2B,IAA/B,EAAqC;AACnC,WAAK,OAAL;AACA,aAAO;AACL,QAAA,OAAO,EAAE,KADJ;AAEL,QAAA,KAAK,EAAE,SAFF;AAGL,QAAA,IAAI,EAAE,SAHD;AAIL,QAAA,SAAS,EAAE,KAAK,UAAL,GAAkB;AAJxB,OAAP;AAMD;;AAED,QAAI,aAAa,GAAG,MAApB;;AACA,QAAI,KAAK,aAAL,GAAqB,KAAzB,EAAgC;AAC9B,MAAA,aAAa,GAAG,KAAK,gBAAL,EAAhB;AACD;;AAEK,QAAA,iBAAA,GAAA,KAAA,UAAA,GAAA,iBAAA;;AACN,QAAI,OAAO,iBAAP,KAA6B,UAAjC,EAA6C;AAC3C,MAAA,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC,KAAK,UAAL,EAAD,CAAvC;AACD;;AAED,QACE,iBAAiB,KAAK,KAAtB,IACA,KAAK,eADL,IAEA,MAAM,CAAC,IAAP,CAAY,KAAK,eAAjB,EAAkC,MAAlC,GAA2C,CAF3C,KAGC,KAAK,eAAL,CAAqB,YAArB,KAAsC,KAAK,UAAL,GAAkB,YAAxD,IACC,CAACA,qBAAQ,KAAK,eAAL,CAAqB,SAA7BA,EAAwC,KAAK,UAAL,GAAkB,SAA1DA,CADF,IAEC,KAAK,eAAL,CAAqB,IAArB,KAA8B,KAAK,UAAL,GAAkB,IALlD,CADF,EAOE;AACA,WAAK,OAAL;AACA,MAAA,aAAa,GAAG,KAAK,gBAAL,EAAhB;AACD;;AAED,SAAK,UAAL,CAAgB,KAAK,UAAL,EAAhB;AACA,SAAK,iBAAL;AAEA,SAAK,eAAL,GAAuB,KAAK,UAAL,EAAvB;AACA,WAAA,qBAAA,qBAAA,EAAA,EAAY,aAAZ,CAAA,EAAyB;AAAE,MAAA,SAAS,EAAE,KAAK,UAAL,GAAkB;AAA/B,KAAzB,CAAA;AACD,GAtCM;;AAwCA,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,SAAK,SAAL,GAAiB,IAAjB;AACD,GAFM;;AAIA,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,SAAK,eAAL;AACA,WAAO,KAAK,iBAAL,CAAuB,KAA9B;AACD,GAHM;;AAKC,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,OAAnB,EAAkE;AAChE,QAAI,KAAK,iBAAL,CAAuB,KAAvB,IAAgC,KAAK,UAAL,GAAkB,IAAlB,KAA2B,IAA/D,EAAqE;AACrE,SAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,aAAL,GAAqB,MAArB,CAA4B,SAA5B,CAAsC;AACnE,MAAA,KAAK,EAAE,OAAO,CAAC,YADoD;AAEnE,MAAA,SAAS,EAAE,OAAO,CAAC,SAFgD;AAGnE,MAAA,WAAW,EAAE,OAAO,CAAC;AAH8C,KAAtC,CAA/B;AAKD,GAPO;;AASA,EAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACE,QAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACzC,SAAK,iBAAL,CAAuB,YAAvB,GAAsC,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,SAA9B,CACpC;AACE,MAAA,IAAI,EAAE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CADR;AAEE,MAAA,KAAK,EAAE,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAFT;AAGE,MAAA,QAAQ,EAAE,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B;AAHZ,KADoC,CAAtC;AAOD,GATO;;AAWA,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACE,WAAO;AACL,MAAA,OAAO,EAAE,IADJ;AAEL,MAAA,KAAK,EAAE,SAFF;AAGL,MAAA,IAAI,EAAE;AAHD,KAAP;AAKD,GANO;;AAQA,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,MAArB,EAA+C;AAC7C,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,SAAL,CAAe,MAAf;AACD;AACF,GAJO;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,MAA1B,EAA2D;AACjD,QAAA,kBAAA,GAAA,KAAA,UAAA,GAAA,kBAAA;AAER,SAAK,YAAL,CAAkB;AAChB,MAAA,IAAI,EAAE,MAAM,CAAC,IADG;AAEhB,MAAA,OAAO,EAAE,KAFO;AAGhB,MAAA,KAAK,EAAE;AAHS,KAAlB;;AAMA,QAAI,kBAAJ,EAAwB;AACtB,MAAA,kBAAkB,CAAC;AACjB,QAAA,MAAM,EAAE,KAAK,aAAL,GAAqB,MADZ;AAEjB,QAAA,gBAAgB,EAAE;AAFD,OAAD,CAAlB;AAID;AACF,GAfO;;AAiBA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,KAApB,EAA8B;AAC5B,SAAK,YAAL,CAAkB;AAChB,MAAA,KAAK,EAAA,KADW;AAEhB,MAAA,OAAO,EAAE;AAFO,KAAlB;AAID,GALO;;AAOA,EAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACU,QAAA,sBAAA,GAAA,KAAA,UAAA,GAAA,sBAAA;AACR,QAAI,sBAAJ,EAA4B,sBAAsB;AAClD,SAAK,eAAL;AACD,GAJO;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACE,QAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACvC,WAAK,iBAAL,CAAuB,YAAvB,CAAoC,WAApC;AACA,aAAO,KAAK,iBAAL,CAAuB,YAA9B;AACD;AACF,GALO;;AAMV,SAAA,gBAAA;AA5IA,CAAA,CAGU,aAHV,CAAA;;SCCgB,e,CACd,Y,EACA,O,EAAoD;AAEpD,MAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;AACA,MAAM,cAAc,GAAG,OAAO,G,8CACrB,O,GAAO;AAAE,IAAA,YAAY,EAAA;AAAd,G,CADc,GAE1B;AAAE,IAAA,YAAY,EAAA;AAAd,GAFJ;;AAGM,MAAA,EAAA,GAAA,qBAAA;iCAAA;oBAAA;;AAAA,GAAA,CAAA;AAAA,MAAC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAS,SAAA,GAAA,EAAA,CAAA,CAAA,CAAT;;AAMN,MAAM,mBAAmB,GAAG,oBAA5B;;AACA,WAAS,sBAAT,GAA+B;AAC7B,QAAI,CAAC,mBAAmB,CAAC,OAAzB,EAAkC;AAChC,MAAA,mBAAmB,CAAC,OAApB,GAA8B,IAAI,gBAAJ,CAAwC;AACpE,QAAA,OAAO,EAAE,cAD2D;AAEpE,QAAA,OAAO,EAAA,OAF6D;AAGpE,QAAA,SAAS,EAAA;AAH2D,OAAxC,CAA9B;AAKD;;AACD,WAAO,mBAAmB,CAAC,OAA3B;AACD;;AAED,MAAM,gBAAgB,GAAG,sBAAsB,EAA/C;AACA,EAAA,gBAAgB,CAAC,UAAjB,CAA4B,cAA5B,EAA4C,IAA5C;AACA,EAAA,gBAAgB,CAAC,OAAjB,GAA2B,OAA3B;AAEA,wBAAU,YAAA;AAAM,WAAA,gBAAgB,CAAC,YAAjB,EAAA;AAA+B,GAA/C;AACA,wBAAU,YAAA;AAAM,WAAA,gBAAgB,CAAC,OAAjB,CAAyB,IAAzB,CAA8B,gBAA9B,CAAA;AAA+C,GAA/D,EAAiE,EAAjE;AAEA,SAAO,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAP;AACD;;SCpCe,e,GAAe;AACrB,MAAA,MAAA,GAAA,eAAA,UAAA,CAAA,oCAAA,EAAA,MAAA;;AACR,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,4BAAA,MAAA,EAAA,CAAA,CAAA,GAAA,4BAAA,MAAA,EAAA,oEAGI,sDAHJ,CAAA;AAKA,SAAO,MAAP;AACD;;ACHD,SAAS,oBAAT,GAA6B;AAC3B,SAAO;AACL,IAAA,IAAI,EAAE,KADD;AAEL,IAAA,UAAU,EAAE;AAFP,GAAP;AAID;;AAED,IAAA,cAAA,GAAA,YAAA;AAAA,WAAA,cAAA,GAAA;AAEU,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAMA,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAuET;;AApEQ,EAAA,cAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,UACE,UADF,EAEE,KAFF,EAEwC;AAEtC,SAAK,eAAL,CAAqB,KAArB,EAA4B,UAA5B,GAAyC,UAAzC;AACD,GALM;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UACE,KADF,EACwC;AAEtC,WAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,UAAnC;AACD,GAJM;;AAMA,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UACE,aADF,EAEE,MAFF,EAE+B;AAE7B,QAAM,IAAI,GAAG,KAAK,eAAL,CAAqB,aAAa,CAAC,UAAd,EAArB,CAAb;;AACA,QAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACd,WAAK,aAAL,CAAmB,GAAnB,CACE,aAAa,CAAC,UAAd,EADF,EAEE,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;AACjB,QAAA,OAAO,CAAC,aAAa,CAAC,SAAd,EAAD,CAAP;AACD,OAFD,CAFF;AAQA,aAAO,IAAP;AACD;;AACD,WAAO,MAAM,EAAb;AACD,GAjBM;;AAmBA,EAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,WAAO,KAAK,aAAL,CAAmB,IAAnB,GAA0B,CAAjC;AACD,GAFM;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,QAAQ,GAAmB,EAAjC;AACA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,OAAD,EAAU,aAAV,EAAuB;AAUhD,MAAA,KAAI,CAAC,eAAL,CAAqB,aAArB,EAAoC,IAApC,GAA2C,IAA3C;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACD,KAZD;AAaA,SAAK,aAAL,CAAmB,KAAnB;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAP;AACD,GAjBM;;AAmBC,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UACE,KADF,EACwC;AAE9B,QAAA,aAAA,GAAA,KAAA,aAAA;AACA,QAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,QAAO,SAAA,GAAA,KAAA,CAAA,SAAP;AACR,QAAM,MAAM,GAAG,aAAa,CAAC,GAAd,CAAkB,KAAlB,KAA4B,IAAI,GAAJ,EAA3C;AACA,QAAI,CAAC,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAL,EAA+B,aAAa,CAAC,GAAd,CAAkB,KAAlB,EAAyB,MAAzB;AAC/B,QAAM,eAAe,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,CAAxB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,eAAX,KAA+B,oBAAoB,EAAhE;AACA,QAAI,CAAC,MAAM,CAAC,GAAP,CAAW,eAAX,CAAL,EAAkC,MAAM,CAAC,GAAP,CAAW,eAAX,EAA4B,IAA5B;AAClC,WAAO,IAAP;AACD,GAXO;;AAYV,SAAA,cAAA;AAAC,CA/ED,EAAA,C","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"]}